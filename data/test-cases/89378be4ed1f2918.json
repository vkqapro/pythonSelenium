{"uid":"89378be4ed1f2918","name":"List Creation","fullName":"tests.regression_ui.test_ui_regression.TestUIRegression#test_list_creation","historyId":"49ea7f8ccb833cc0e7e10d54c5c5798b","time":{"start":1733889782671,"stop":1733889843130,"duration":60459},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f26d6f74820>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52ce7c68196b4d977d2e41ab24018124\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n>           log.info(f\"the name of the new list is: {driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text}\")\n\ntests/regression_ui/test_ui_regression.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f26d7e2be20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x5602832d4740 \\\\u003Cunknown>\\\\n#17 0x5602832e4196 \\\\u003Cunknown>\\\\n#18 0x7f325c894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(), 'To Do')][1]\"}\nE         (Session info: chrome=131.0.6778.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x5602832e531a <unknown>\nE       #1 0x560282dfb6e0 <unknown>\nE       #2 0x560282e4a3e6 <unknown>\nE       #3 0x560282e4a681 <unknown>\nE       #4 0x560282e8fb04 <unknown>\nE       #5 0x560282e6e48d <unknown>\nE       #6 0x560282e8ced7 <unknown>\nE       #7 0x560282e6e203 <unknown>\nE       #8 0x560282e3ccc0 <unknown>\nE       #9 0x560282e3dc9e <unknown>\nE       #10 0x5602832b2d0b <unknown>\nE       #11 0x5602832b6c92 <unknown>\nE       #12 0x56028329fb3c <unknown>\nE       #13 0x5602832b7807 <unknown>\nE       #14 0x5602832850df <unknown>\nE       #15 0x5602832d4578 <unknown>\nE       #16 0x5602832d4740 <unknown>\nE       #17 0x5602832e4196 <unknown>\nE       #18 0x7f325c894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f26d6f74820>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52ce7c68196b4d977d2e41ab24018124\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n            log.info(f\"the name of the new list is: {driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text}\")\n            assert driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text == \"new_list\"\n    \n        except NoSuchElementException:\n>           WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, self.SCC.Board.ADD_ANOTHER_LIST_BUTTON))).click()\n\ntests/regression_ui/test_ui_regression.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"52ce7c68196b4d977d2e41ab24018124\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f26d72315e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1733889782401,"stop":1733889782670,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1733889782670,"stop":1733889782670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f26d6f74820>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52ce7c68196b4d977d2e41ab24018124\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n>           log.info(f\"the name of the new list is: {driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text}\")\n\ntests/regression_ui/test_ui_regression.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f26d7e2be20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x5602832d4740 \\\\u003Cunknown>\\\\n#17 0x5602832e4196 \\\\u003Cunknown>\\\\n#18 0x7f325c894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(), 'To Do')][1]\"}\nE         (Session info: chrome=131.0.6778.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x5602832e531a <unknown>\nE       #1 0x560282dfb6e0 <unknown>\nE       #2 0x560282e4a3e6 <unknown>\nE       #3 0x560282e4a681 <unknown>\nE       #4 0x560282e8fb04 <unknown>\nE       #5 0x560282e6e48d <unknown>\nE       #6 0x560282e8ced7 <unknown>\nE       #7 0x560282e6e203 <unknown>\nE       #8 0x560282e3ccc0 <unknown>\nE       #9 0x560282e3dc9e <unknown>\nE       #10 0x5602832b2d0b <unknown>\nE       #11 0x5602832b6c92 <unknown>\nE       #12 0x56028329fb3c <unknown>\nE       #13 0x5602832b7807 <unknown>\nE       #14 0x5602832850df <unknown>\nE       #15 0x5602832d4578 <unknown>\nE       #16 0x5602832d4740 <unknown>\nE       #17 0x5602832e4196 <unknown>\nE       #18 0x7f325c894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f26d6f74820>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52ce7c68196b4d977d2e41ab24018124\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n            log.info(f\"the name of the new list is: {driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text}\")\n            assert driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text == \"new_list\"\n    \n        except NoSuchElementException:\n>           WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, self.SCC.Board.ADD_ANOTHER_LIST_BUTTON))).click()\n\ntests/regression_ui/test_ui_regression.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"52ce7c68196b4d977d2e41ab24018124\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f26d72315e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Navigate to the Trello login page","time":{"start":1733889792680,"stop":1733889796074,"duration":3394},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enter valid credentials (email, password, and 6-digits verification code)","time":{"start":1733889796074,"stop":1733889810188,"duration":14114},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"31f8e956871e42a9","name":"log","source":"31f8e956871e42a9.txt","type":"text/plain","size":141696}],"parameters":[],"stepsCount":2,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1733889843199,"stop":1733889843281,"duration":82},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"TC003"},{"name":"tag","value":"TC000"},{"name":"parentSuite","value":"tests.regression_ui"},{"name":"suite","value":"test_ui_regression"},{"name":"subSuite","value":"TestUIRegression"},{"name":"host","value":"fv-az881-26"},{"name":"thread","value":"3218-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.regression_ui.test_ui_regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":9,"unknown":0,"total":13},"items":[{"uid":"e16730e78089798d","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1733888639212,"stop":1733888699808,"duration":60596}},{"uid":"6ca4eac98e9d575b","status":"passed","time":{"start":1733843187710,"stop":1733843221981,"duration":34271}},{"uid":"925f0ff5ac92c972","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1733842651592,"stop":1733842712054,"duration":60462}},{"uid":"267dbac274adec29","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1733841805262,"stop":1733841865681,"duration":60419}},{"uid":"5f03815e5936093d","status":"passed","time":{"start":1733840225455,"stop":1733840259737,"duration":34282}},{"uid":"dfa1ba869822200c","status":"passed","time":{"start":1733797171987,"stop":1733797203753,"duration":31766}},{"uid":"7b50b40ad677308c","status":"passed","time":{"start":1733586053446,"stop":1733586085184,"duration":31738}},{"uid":"e055a8212de2b6dc","status":"passed","time":{"start":1733548504092,"stop":1733548535934,"duration":31842}},{"uid":"ba0690215f36258b","status":"passed","time":{"start":1733548260752,"stop":1733548292519,"duration":31767}},{"uid":"fae7e8b16652eb5","status":"passed","time":{"start":1733547830869,"stop":1733547863062,"duration":32193}},{"uid":"efaa07d3eb94f8ec","status":"passed","time":{"start":1733451841775,"stop":1733451869633,"duration":27858}},{"uid":"147895dbae7b3809","status":"passed","time":{"start":1733435716421,"stop":1733435741235,"duration":24814}}]},"tags":["TC003","TC000"]},"source":"89378be4ed1f2918.json","parameterValues":[]}