{"uid":"d8da1304bbb1e3e7","name":"List Creation","fullName":"tests.regression_ui.test_ui_regression.TestUIRegression#test_list_creation","historyId":"49ea7f8ccb833cc0e7e10d54c5c5798b","time":{"start":1734397789154,"stop":1734397819388,"duration":30234},"status":"failed","statusMessage":"AssertionError: assert 'new_list_playwright' == 'new_list'\n  \n  - new_list\n  + new_list_playwright","statusTrace":"self = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f6956eb2570>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe2467e7f3c10b72bc6b5fdc63b7f908\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n>           driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n\ntests/regression_ui/test_ui_regression.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6956eb5df0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x564c16e481c6 \\\\u003Cunknown>\\\\n#18 0x7f0cde49ca94 \\\\u003Cunknown>\\\\n#19 0x7f0cde529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(), 'Add a list')]\"}\nE         (Session info: chrome=131.0.6778.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x564c16e4934a <unknown>\nE       #1 0x564c1695f6e0 <unknown>\nE       #2 0x564c169ae3e6 <unknown>\nE       #3 0x564c169ae681 <unknown>\nE       #4 0x564c169f3b04 <unknown>\nE       #5 0x564c169d248d <unknown>\nE       #6 0x564c169f0ed7 <unknown>\nE       #7 0x564c169d2203 <unknown>\nE       #8 0x564c169a0cc0 <unknown>\nE       #9 0x564c169a1c9e <unknown>\nE       #10 0x564c16e16d3b <unknown>\nE       #11 0x564c16e1acc2 <unknown>\nE       #12 0x564c16e03b6c <unknown>\nE       #13 0x564c16e1b837 <unknown>\nE       #14 0x564c16de910f <unknown>\nE       #15 0x564c16e385a8 <unknown>\nE       #16 0x564c16e38770 <unknown>\nE       #17 0x564c16e481c6 <unknown>\nE       #18 0x7f0cde49ca94 <unknown>\nE       #19 0x7f0cde529c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f6956eb2570>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe2467e7f3c10b72bc6b5fdc63b7f908\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n            log.info(f\"the name of the new list is: {driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text}\")\n            assert driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text == \"new_list\"\n    \n        except NoSuchElementException:\n            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, self.SCC.Board.ADD_ANOTHER_LIST_BUTTON))).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n>           assert driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text == \"new_list\"\nE           AssertionError: assert 'new_list_playwright' == 'new_list'\nE             \nE             - new_list\nE             + new_list_playwright\n\ntests/regression_ui/test_ui_regression.py:133: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1734397788888,"stop":1734397789154,"duration":266},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1734397789154,"stop":1734397789154,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'new_list_playwright' == 'new_list'\n  \n  - new_list\n  + new_list_playwright","statusTrace":"self = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f6956eb2570>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe2467e7f3c10b72bc6b5fdc63b7f908\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n>           driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n\ntests/regression_ui/test_ui_regression.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6956eb5df0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x564c16e481c6 \\\\u003Cunknown>\\\\n#18 0x7f0cde49ca94 \\\\u003Cunknown>\\\\n#19 0x7f0cde529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(), 'Add a list')]\"}\nE         (Session info: chrome=131.0.6778.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x564c16e4934a <unknown>\nE       #1 0x564c1695f6e0 <unknown>\nE       #2 0x564c169ae3e6 <unknown>\nE       #3 0x564c169ae681 <unknown>\nE       #4 0x564c169f3b04 <unknown>\nE       #5 0x564c169d248d <unknown>\nE       #6 0x564c169f0ed7 <unknown>\nE       #7 0x564c169d2203 <unknown>\nE       #8 0x564c169a0cc0 <unknown>\nE       #9 0x564c169a1c9e <unknown>\nE       #10 0x564c16e16d3b <unknown>\nE       #11 0x564c16e1acc2 <unknown>\nE       #12 0x564c16e03b6c <unknown>\nE       #13 0x564c16e1b837 <unknown>\nE       #14 0x564c16de910f <unknown>\nE       #15 0x564c16e385a8 <unknown>\nE       #16 0x564c16e38770 <unknown>\nE       #17 0x564c16e481c6 <unknown>\nE       #18 0x7f0cde49ca94 <unknown>\nE       #19 0x7f0cde529c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f6956eb2570>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe2467e7f3c10b72bc6b5fdc63b7f908\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC003\n    @allure.title('List Creation')\n    def test_list_creation(self, driver):\n        time.sleep(10)\n        self.test_login(driver)\n        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n        time.sleep(2)\n        try:\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_A_LIST_BUTTON).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n            log.info(f\"the name of the new list is: {driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text}\")\n            assert driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text == \"new_list\"\n    \n        except NoSuchElementException:\n            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, self.SCC.Board.ADD_ANOTHER_LIST_BUTTON))).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).click()\n            driver.find_element(By.XPATH, self.SCC.Board.ENTER_LIST_NAME_FIELD).send_keys('new_list')\n            driver.find_element(By.XPATH, self.SCC.Board.ADD_LIST_SUBMIT_BUTTON).click()\n>           assert driver.find_element(By.XPATH, self.SCC.Board.LIST_TITLE).text == \"new_list\"\nE           AssertionError: assert 'new_list_playwright' == 'new_list'\nE             \nE             - new_list\nE             + new_list_playwright\n\ntests/regression_ui/test_ui_regression.py:133: AssertionError","steps":[{"name":"Navigate to the Trello login page","time":{"start":1734397799155,"stop":1734397802502,"duration":3347},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enter valid credentials (email, password, and 6-digits verification code)","time":{"start":1734397802502,"stop":1734397816637,"duration":14135},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"92c37d6d32a13b08","name":"log","source":"92c37d6d32a13b08.txt","type":"text/plain","size":39306}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1734397819424,"stop":1734397819501,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"TC003"},{"name":"tag","value":"TC000"},{"name":"parentSuite","value":"tests.regression_ui"},{"name":"suite","value":"test_ui_regression"},{"name":"subSuite","value":"TestUIRegression"},{"name":"host","value":"fv-az1914-226"},{"name":"thread","value":"3611-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.regression_ui.test_ui_regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":6,"skipped":0,"passed":26,"unknown":0,"total":33},"items":[{"uid":"fec1ab611fc61373","status":"passed","time":{"start":1734373277569,"stop":1734373311728,"duration":34159}},{"uid":"13ebade6971bd973","status":"passed","time":{"start":1734311576195,"stop":1734311610458,"duration":34263}},{"uid":"a5391812a423d7e9","status":"passed","time":{"start":1734286731721,"stop":1734286765857,"duration":34136}},{"uid":"b69ae857dd5136c8","status":"passed","time":{"start":1734225290339,"stop":1734225324557,"duration":34218}},{"uid":"d49119703a853f8f","status":"passed","time":{"start":1734200341870,"stop":1734200376000,"duration":34130}},{"uid":"5ec4138477b9cec8","status":"passed","time":{"start":1734185841654,"stop":1734185875992,"duration":34338}},{"uid":"5cdd925cf9647d6","status":"passed","time":{"start":1734123979946,"stop":1734124014106,"duration":34160}},{"uid":"73fbef52485c486f","status":"broken","statusDetails":"TypeError: not all arguments converted during string formatting","time":{"start":1734113620852,"stop":1734113658384,"duration":37532}},{"uid":"c0e11251adad6a51","status":"passed","time":{"start":1734050792612,"stop":1734050826925,"duration":34313}},{"uid":"e207d741a6b9b11e","status":"passed","time":{"start":1734027389359,"stop":1734027423630,"duration":34271}},{"uid":"ee213be5e7c80ff1","status":"passed","time":{"start":1733973760270,"stop":1733973794505,"duration":34235}},{"uid":"11cfd7ad3d6405ab","status":"passed","time":{"start":1733972625898,"stop":1733972660238,"duration":34340}},{"uid":"672cb309cfbc5407","status":"passed","time":{"start":1733971660539,"stop":1733971694737,"duration":34198}},{"uid":"98b0244e8bcec819","status":"passed","time":{"start":1733970406063,"stop":1733970440384,"duration":34321}},{"uid":"bff26a34a9e35c6b","status":"passed","time":{"start":1733963304762,"stop":1733963339260,"duration":34498}},{"uid":"fe0dbebc5d61d73b","status":"passed","time":{"start":1733932576256,"stop":1733932610937,"duration":34681}},{"uid":"8c39684a17b6b6aa","status":"passed","time":{"start":1733891419123,"stop":1733891453452,"duration":34329}},{"uid":"51db39972cd7e322","status":"passed","time":{"start":1733890975045,"stop":1733891009227,"duration":34182}},{"uid":"d0c7fda61dbc8aa8","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1733890404277,"stop":1733890464896,"duration":60619}},{"uid":"89378be4ed1f2918","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1733889782671,"stop":1733889843130,"duration":60459}}]},"tags":["TC003","TC000"]},"source":"d8da1304bbb1e3e7.json","parameterValues":[]}