{"uid":"1aee289aa7f53774","name":"Label a Card","fullName":"tests.regression_ui.test_ui_regression.TestUIRegression#test_label_card","historyId":"81bf587fe9f2db9e87ee2dc06e7308b0","time":{"start":1738217890647,"stop":1738217919423,"duration":28776},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"S1YMKJFPn9WNGk\">...</div> is not clickable at point (1296, 433). Other element would receive the click: <div class=\"ySQIVFZtJ_1G5J QIUmf9rrTzMUV2\" data-auto-scrollable=\"true\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x556c5e9c6dca <unknown>\n#1 0x556c5e4bd3f0 <unknown>\n#2 0x556c5e513dde <unknown>\n#3 0x556c5e511d13 <unknown>\n#4 0x556c5e50f422 <unknown>\n#5 0x556c5e50e643 <unknown>\n#6 0x556c5e5012bd <unknown>\n#7 0x556c5e531a92 <unknown>\n#8 0x556c5e500c48 <unknown>\n#9 0x556c5e531c5e <unknown>\n#10 0x556c5e5504b3 <unknown>\n#11 0x556c5e531833 <unknown>\n#12 0x556c5e4fe5a0 <unknown>\n#13 0x556c5e4ffece <unknown>\n#14 0x556c5e990bdb <unknown>\n#15 0x556c5e994b67 <unknown>\n#16 0x556c5e97c3bc <unknown>\n#17 0x556c5e995727 <unknown>\n#18 0x556c5e96074f <unknown>\n#19 0x556c5e9b5938 <unknown>\n#20 0x556c5e9b5b00 <unknown>\n#21 0x556c5e9c5c46 <unknown>\n#22 0x7f8aea69ca94 <unknown>\n#23 0x7f8aea729c3c <unknown>","statusTrace":"self = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f4eb8ba6810>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2498fd8e0ebe50a8fb9195aca683a06e\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC007\n    @allure.title('Label a Card')\n    def test_label_card(self, driver):\n        time.sleep(4)\n        with allure.step('Log in to Trello account'):\n            self.test_login(driver)\n    \n        with allure.step('Open a board and select a card'):\n            try:\n                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.LIST_TITLE))).click()\n                driver.find_element(By.XPATH, self.SCC.List.ADD_A_CARD_BUTTON).click()\n                driver.find_element(By.XPATH, self.SCC.List.CARD_NAME_FIELD).click()\n                time.sleep(1)\n                driver.find_element(By.XPATH, self.SCC.List.CARD_NAME_FIELD).send_keys('new_card')\n                driver.find_element(By.XPATH, self.SCC.List.ADD_CARD_SUBMIT_BUTTOMN).click()\n                time.sleep(3)\n            except Exception as e:\n                log.info(\"An error occurred: \", str(e))\n    \n        with allure.step('Click the card to open and archive it'):\n            driver.find_element(By.XPATH, self.SCC.List.CARD_TO_ARCHIVE).click()\n>           WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, self.SCC.List.LABELS_BUTTON))).click()\n\ntests/regression_ui/test_ui_regression.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4eb8ba9130>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x556c5e9c5c46 \\\\u003Cunknown>\\\\n#22 0x7f8aea69ca94 \\\\u003Cunknown>\\\\n#23 0x7f8aea729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"S1YMKJFPn9WNGk\">...</div> is not clickable at point (1296, 433). Other element would receive the click: <div class=\"ySQIVFZtJ_1G5J QIUmf9rrTzMUV2\" data-auto-scrollable=\"true\">...</div>\nE         (Session info: chrome=132.0.6834.159)\nE       Stacktrace:\nE       #0 0x556c5e9c6dca <unknown>\nE       #1 0x556c5e4bd3f0 <unknown>\nE       #2 0x556c5e513dde <unknown>\nE       #3 0x556c5e511d13 <unknown>\nE       #4 0x556c5e50f422 <unknown>\nE       #5 0x556c5e50e643 <unknown>\nE       #6 0x556c5e5012bd <unknown>\nE       #7 0x556c5e531a92 <unknown>\nE       #8 0x556c5e500c48 <unknown>\nE       #9 0x556c5e531c5e <unknown>\nE       #10 0x556c5e5504b3 <unknown>\nE       #11 0x556c5e531833 <unknown>\nE       #12 0x556c5e4fe5a0 <unknown>\nE       #13 0x556c5e4ffece <unknown>\nE       #14 0x556c5e990bdb <unknown>\nE       #15 0x556c5e994b67 <unknown>\nE       #16 0x556c5e97c3bc <unknown>\nE       #17 0x556c5e995727 <unknown>\nE       #18 0x556c5e96074f <unknown>\nE       #19 0x556c5e9b5938 <unknown>\nE       #20 0x556c5e9b5b00 <unknown>\nE       #21 0x556c5e9c5c46 <unknown>\nE       #22 0x7f8aea69ca94 <unknown>\nE       #23 0x7f8aea729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1738217890395,"stop":1738217890647,"duration":252},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1738217890647,"stop":1738217890647,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"S1YMKJFPn9WNGk\">...</div> is not clickable at point (1296, 433). Other element would receive the click: <div class=\"ySQIVFZtJ_1G5J QIUmf9rrTzMUV2\" data-auto-scrollable=\"true\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x556c5e9c6dca <unknown>\n#1 0x556c5e4bd3f0 <unknown>\n#2 0x556c5e513dde <unknown>\n#3 0x556c5e511d13 <unknown>\n#4 0x556c5e50f422 <unknown>\n#5 0x556c5e50e643 <unknown>\n#6 0x556c5e5012bd <unknown>\n#7 0x556c5e531a92 <unknown>\n#8 0x556c5e500c48 <unknown>\n#9 0x556c5e531c5e <unknown>\n#10 0x556c5e5504b3 <unknown>\n#11 0x556c5e531833 <unknown>\n#12 0x556c5e4fe5a0 <unknown>\n#13 0x556c5e4ffece <unknown>\n#14 0x556c5e990bdb <unknown>\n#15 0x556c5e994b67 <unknown>\n#16 0x556c5e97c3bc <unknown>\n#17 0x556c5e995727 <unknown>\n#18 0x556c5e96074f <unknown>\n#19 0x556c5e9b5938 <unknown>\n#20 0x556c5e9b5b00 <unknown>\n#21 0x556c5e9c5c46 <unknown>\n#22 0x7f8aea69ca94 <unknown>\n#23 0x7f8aea729c3c <unknown>","statusTrace":"self = <tests.regression_ui.test_ui_regression.TestUIRegression object at 0x7f4eb8ba6810>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2498fd8e0ebe50a8fb9195aca683a06e\")>\n\n    @pytest.mark.TC000\n    @pytest.mark.TC007\n    @allure.title('Label a Card')\n    def test_label_card(self, driver):\n        time.sleep(4)\n        with allure.step('Log in to Trello account'):\n            self.test_login(driver)\n    \n        with allure.step('Open a board and select a card'):\n            try:\n                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, self.SCC.Board.BOARD_TITLE))).click()\n                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, self.SCC.Board.LIST_TITLE))).click()\n                driver.find_element(By.XPATH, self.SCC.List.ADD_A_CARD_BUTTON).click()\n                driver.find_element(By.XPATH, self.SCC.List.CARD_NAME_FIELD).click()\n                time.sleep(1)\n                driver.find_element(By.XPATH, self.SCC.List.CARD_NAME_FIELD).send_keys('new_card')\n                driver.find_element(By.XPATH, self.SCC.List.ADD_CARD_SUBMIT_BUTTOMN).click()\n                time.sleep(3)\n            except Exception as e:\n                log.info(\"An error occurred: \", str(e))\n    \n        with allure.step('Click the card to open and archive it'):\n            driver.find_element(By.XPATH, self.SCC.List.CARD_TO_ARCHIVE).click()\n>           WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, self.SCC.List.LABELS_BUTTON))).click()\n\ntests/regression_ui/test_ui_regression.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4eb8ba9130>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x556c5e9c5c46 \\\\u003Cunknown>\\\\n#22 0x7f8aea69ca94 \\\\u003Cunknown>\\\\n#23 0x7f8aea729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"S1YMKJFPn9WNGk\">...</div> is not clickable at point (1296, 433). Other element would receive the click: <div class=\"ySQIVFZtJ_1G5J QIUmf9rrTzMUV2\" data-auto-scrollable=\"true\">...</div>\nE         (Session info: chrome=132.0.6834.159)\nE       Stacktrace:\nE       #0 0x556c5e9c6dca <unknown>\nE       #1 0x556c5e4bd3f0 <unknown>\nE       #2 0x556c5e513dde <unknown>\nE       #3 0x556c5e511d13 <unknown>\nE       #4 0x556c5e50f422 <unknown>\nE       #5 0x556c5e50e643 <unknown>\nE       #6 0x556c5e5012bd <unknown>\nE       #7 0x556c5e531a92 <unknown>\nE       #8 0x556c5e500c48 <unknown>\nE       #9 0x556c5e531c5e <unknown>\nE       #10 0x556c5e5504b3 <unknown>\nE       #11 0x556c5e531833 <unknown>\nE       #12 0x556c5e4fe5a0 <unknown>\nE       #13 0x556c5e4ffece <unknown>\nE       #14 0x556c5e990bdb <unknown>\nE       #15 0x556c5e994b67 <unknown>\nE       #16 0x556c5e97c3bc <unknown>\nE       #17 0x556c5e995727 <unknown>\nE       #18 0x556c5e96074f <unknown>\nE       #19 0x556c5e9b5938 <unknown>\nE       #20 0x556c5e9b5b00 <unknown>\nE       #21 0x556c5e9c5c46 <unknown>\nE       #22 0x7f8aea69ca94 <unknown>\nE       #23 0x7f8aea729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Log in to Trello account","time":{"start":1738217894647,"stop":1738217912136,"duration":17489},"status":"passed","steps":[{"name":"Navigate to the Trello login page","time":{"start":1738217894647,"stop":1738217898020,"duration":3373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enter valid credentials (email, password, and 6-digits verification code)","time":{"start":1738217898020,"stop":1738217912136,"duration":14116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Open a board and select a card","time":{"start":1738217912136,"stop":1738217918078,"duration":5942},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Click the card to open and archive it","time":{"start":1738217918078,"stop":1738217919422,"duration":1344},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"S1YMKJFPn9WNGk\">...</div> is not clickable at point (1296, 433). Other element would receive the click: <div class=\"ySQIVFZtJ_1G5J QIUmf9rrTzMUV2\" data-auto-scrollable=\"true\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x556c5e9c6dca <unknown>\n#1 0x556c5e4bd3f0 <unknown>\n#2 0x556c5e513dde <unknown>\n#3 0x556c5e511d13 <unknown>\n#4 0x556c5e50f422 <unknown>\n#5 0x556c5e50e643 <unknown>\n#6 0x556c5e5012bd <unknown>\n#7 0x556c5e531a92 <unknown>\n#8 0x556c5e500c48 <unknown>\n#9 0x556c5e531c5e <unknown>\n#10 0x556c5e5504b3 <unknown>\n#11 0x556c5e531833 <unknown>\n#12 0x556c5e4fe5a0 <unknown>\n#13 0x556c5e4ffece <unknown>\n#14 0x556c5e990bdb <unknown>\n#15 0x556c5e994b67 <unknown>\n#16 0x556c5e97c3bc <unknown>\n#17 0x556c5e995727 <unknown>\n#18 0x556c5e96074f <unknown>\n#19 0x556c5e9b5938 <unknown>\n#20 0x556c5e9b5b00 <unknown>\n#21 0x556c5e9c5c46 <unknown>\n#22 0x7f8aea69ca94 <unknown>\n#23 0x7f8aea729c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/pythonSelenium/pythonSelenium/tests/regression_ui/test_ui_regression.py\", line 238, in test_label_card\n    WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, self.SCC.List.LABELS_BUTTON))).click()\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1738217919456,"stop":1738217919536,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"TC007"},{"name":"tag","value":"TC000"},{"name":"parentSuite","value":"tests.regression_ui"},{"name":"suite","value":"test_ui_regression"},{"name":"subSuite","value":"TestUIRegression"},{"name":"host","value":"fv-az1338-766"},{"name":"thread","value":"4059-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.regression_ui.test_ui_regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":14,"skipped":0,"passed":142,"unknown":0,"total":156},"items":[{"uid":"201ecab1e56bb152","status":"passed","time":{"start":1738198047541,"stop":1738198081496,"duration":33955}},{"uid":"eb76047c8209fb93","status":"passed","time":{"start":1738185189004,"stop":1738185222965,"duration":33961}},{"uid":"1fe175b36378bc4e","status":"passed","time":{"start":1738174621909,"stop":1738174655571,"duration":33662}},{"uid":"b88aa641404a86e2","status":"passed","time":{"start":1738163629094,"stop":1738163662539,"duration":33445}},{"uid":"9a87887008d77ba6","status":"passed","time":{"start":1738153309986,"stop":1738153344105,"duration":34119}},{"uid":"e73dfe5f0661dd68","status":"passed","time":{"start":1738142026146,"stop":1738142060069,"duration":33923}},{"uid":"ff26004d54855b98","status":"passed","time":{"start":1738131494158,"stop":1738131528026,"duration":33868}},{"uid":"d252fc73e8108763","status":"passed","time":{"start":1738120516224,"stop":1738120550310,"duration":34086}},{"uid":"5e70d34a6cd32c20","status":"passed","time":{"start":1738111720925,"stop":1738111755089,"duration":34164}},{"uid":"46d4fb810e131bc9","status":"passed","time":{"start":1738098727963,"stop":1738098761922,"duration":33959}},{"uid":"94869cb92dc25637","status":"passed","time":{"start":1738088206766,"stop":1738088240543,"duration":33777}},{"uid":"77d3989856ac26ab","status":"passed","time":{"start":1738077236353,"stop":1738077269815,"duration":33462}},{"uid":"a1444af8397cda7f","status":"passed","time":{"start":1738066858211,"stop":1738066891669,"duration":33458}},{"uid":"f13b05c9835ef733","status":"passed","time":{"start":1738055645500,"stop":1738055678991,"duration":33491}},{"uid":"c468b5ec7d2a1b77","status":"passed","time":{"start":1738045083321,"stop":1738045117209,"duration":33888}},{"uid":"6533203e7eeb592","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564bc85c17ca <unknown>\n#1 0x564bc80b92f0 <unknown>\n#2 0x564bc8109035 <unknown>\n#3 0x564bc8109251 <unknown>\n#4 0x564bc814f054 <unknown>\n#5 0x564bc812d9dd <unknown>\n#6 0x564bc814c3b3 <unknown>\n#7 0x564bc812d753 <unknown>\n#8 0x564bc80fabaa <unknown>\n#9 0x564bc80fbdfe <unknown>\n#10 0x564bc858c38b <unknown>\n#11 0x564bc8590307 <unknown>\n#12 0x564bc8578e7c <unknown>\n#13 0x564bc8590ec7 <unknown>\n#14 0x564bc855d24f <unknown>\n#15 0x564bc85b02f8 <unknown>\n#16 0x564bc85b04c0 <unknown>\n#17 0x564bc85c0646 <unknown>\n#18 0x7f70f3c9ca94 <unknown>\n#19 0x7f70f3d29c3c <unknown>","time":{"start":1738034101276,"stop":1738034151099,"duration":49823}},{"uid":"60f21f13bf3ab1a6","status":"passed","time":{"start":1738025305853,"stop":1738025339733,"duration":33880}},{"uid":"acf8faf7b02a63ca","status":"passed","time":{"start":1738012355442,"stop":1738012388906,"duration":33464}},{"uid":"4081e747174c7418","status":"passed","time":{"start":1738001847684,"stop":1738001881061,"duration":33377}},{"uid":"769ae37c44c841a2","status":"passed","time":{"start":1737990784163,"stop":1737990818459,"duration":34296}}]},"tags":["TC007","TC000"]},"source":"1aee289aa7f53774.json","parameterValues":[]}